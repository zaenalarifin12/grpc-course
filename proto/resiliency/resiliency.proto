syntax = "proto3";

package resiliency;

import "proto/protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/zaenalarifin12/grpc-course/protogen/go/resiliency";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Course - Protobuf & gRPC";
    version: "1.0.0";
  };
  host: "localhost:8081";
  schemes: HTTP;
  produces: "application/json";
};

message ResiliencyRequest {
  int32 min_delay_second = 1  [
    json_name = "min_delay_second",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Minimum delay in second (inclusive)",
      format: "integer",
      example: "2"
    }
  ];

  int32 max_delay_second = 2
  [
    json_name = "max_delay_second",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Maximum delay in second (inclusive)",
      format: "integer",
      example: "7"
    }
  ];

  repeated uint32 status_codes = 3
  [
    json_name = "status_codes",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Array of gRPC status codes to be generated (numeric)",
    }
  ];

}

message ResiliencyResponse {
  string dummy_string = 1 [
    json_name = "dummy_string",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Dummy string for response"
    }
  ];
}

service ResiliencyService {
  rpc UnaryResiliency(ResiliencyRequest)
      returns (ResiliencyResponse) {
    option (google.api.http) = {
      get: "/api/resiliency/v1/unary"
    };
  }

  rpc StreamingResiliency(ResiliencyRequest)
      returns (stream ResiliencyResponse) {
    option (google.api.http) = {
      get: "/api/resiliency/v1/server_streaming/{min_delay_second}/{max_delay_second}"
    };
  }

  rpc ClientStreamingResiliency(stream ResiliencyRequest)
      returns (ResiliencyResponse) {
    option (google.api.http) = {
      get: "/api/resiliency/v1/client_streaming"
    };
  }

  rpc BiDirectionalResiliency(stream ResiliencyRequest)
      returns (stream ResiliencyResponse) {
    option (google.api.http) = {
      get: "/api/resiliency/v1/bidirectional_streaming"
    };
  }
}

service ResiliencyWithMetadataService {
  // This comment will be generated as OpenAPI summary
  // for UnaryResiliencyWithMetadata
  rpc UnaryResiliencyWithMetadata(ResiliencyRequest)
      returns (ResiliencyResponse) {
    option (google.api.http) = {
      post: "/api/resiliency/v1/metadata/unary"
      body: "*"
    };
  }

  rpc StreamingResiliencyWithMetadata(ResiliencyRequest)
      returns (stream ResiliencyResponse) {
    option (google.api.http) = {
      post: "/api/resiliency/v1/metadata/server_streaming"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Summary for ServerStreamingResiliencyWithMetadata",
      description: "Description for ServerStreamingResiliencyWithMetadata",
      responses: {
        key: "200"
        value: {
          description: "Sample response, 200 when ..."
        }
      }
      responses: {
        key: "400";
        value: {
          description: "Sample response, 400 when .."
        }
      }
    };
  }

  rpc ClientStreamingResiliencyWithMetadata(stream ResiliencyRequest)
      returns (ResiliencyResponse) {
    option (google.api.http) = {
      post: "/api/resiliency/v1/metadata/client_streaming"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Summary for ClientStreamingResiliencyWithMetadata",
      description: "Description for ClientStreamingResiliencyWithMetadata",
      responses: {
        key: "200"
        value: {
          description: "Sample response, 200 when ..."
        }
      }
      responses: {
        key: "400";
        value: {
          description: "Sample response, 400 when .."
        }
      }
    };
  }

  rpc BiDirectionalResiliencyWithMetadata(stream ResiliencyRequest)
      returns (stream ResiliencyResponse) {
    option (google.api.http) = {
      post: "/api/resiliency/v1/metadata/bidirectional_streaming"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Summary for BiDirectionalResiliencyWithMetadata",
      description: "Description for BiDirectionalResiliencyWithMetadata",
      responses: {
        key: "200"
        value: {
          description: "Sample response, 200 when ..."
        }
      }
      responses: {
        key: "400";
        value: {
          description: "Sample response, 400 when .."
        }
      }
    };
  }
}